var searchIndex = JSON.parse('{\
"reg_file_parser":{"doc":"A Rust port of Registry Export File Parser in C# by …","t":[0,0,0,3,11,11,12,11,12,12,11,12,11,11,11,11,11,12,11,12,11,11,11,3,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,12,5,5,5,5],"n":["reg_file_object","reg_value_object","utils","RegFileObject","borrow","borrow_mut","content","default","encoding","filename","from","full_path","into","new","normalize_keys_dictionary","normalize_values_dictionary","parse_file","path","read","regvalues","try_from","try_into","type_id","RegValueObject","borrow","borrow_mut","default","entry","fmt","from","get_hive","get_hive_without_root","get_reg_entry_type","get_reg_entry_value","get_string_representation","into","new","parent_key","parent_key_without_root","reg_type","root","set_reg_entry_type","to_string","try_from","try_into","type_id","value","get_encoding","strip_braces","strip_continue_char","strip_leading_chars"],"q":["reg_file_parser","","","reg_file_parser::reg_file_object","","","","","","","","","","","","","","","","","","","","reg_file_parser::reg_value_object","","","","","","","","","","","","","","","","","","","","","","","","reg_file_parser::utils","","",""],"d":["Registry File Object.","Registry Value Object","Select utilities that do not fit in any other module.","Represents a registry file’s properties","","","The raw content of the REG file.","","The file encoding of the REG file. ANSI or UTF8.","The file name of the REG file","","The full path to the REG file.","","Constructs a new instance of <code>RegFileObject</code>","NOT WORKING YET.","TODO","TODO","The relative file path of the REG file","TODO","The <code>HashMap</code> containing parsed registry values.","","","","Represents a Registry Value","","","","Registry Value Name","","","Returns Registry Root Hive","Gets registry hive without the root hive","Retrieves the reg value type, parsing the prefix of the …","Returns the registry value without the type declaration …","Converts the byte arrays (<code>Vec<&str></code>) into string","","Returns a <code>RegValueObject</code> given the following parameters:","Registry Value parent key, if applicable","Registry Value parent key, without root HIVE","Registry Value Type","Registry Root HIVE","Sets the registry entry’s type from the given data …","","","","","Registry Value Data","Parses raw registry file content to determine encoding …","Strips braces (‘[’ and ‘]’) from a given <code>&str</code> and …","Removes the ending backslashes from the given <code>&str</code> and …","Strips specified leading chars from a <code>&str</code> and returns …"],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0],"f":[null,null,null,null,[[]],[[]],null,[[],["regfileobject",3]],null,null,[[]],null,[[]],[[["str",15]],["regfileobject",3]],[[],[["string",3],["hashmap",3]]],[[["string",3]],[["string",3],["hashmap",3]]],[[],[["string",3],["hashmap",3],["hashmap",3]]],null,[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],["regvalueobject",3]],null,[[["formatter",3]],["result",6]],[[]],[[["str",15]],["str",15]],[[["str",15]],["string",3]],[[["str",15]],["str",15]],[[["str",15],["str",15]],["string",3]],[[["vec",3],["str",15]],["string",3]],[[]],[[["str",15]],["regvalueobject",3]],null,null,null,null,[[["str",15]],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["string",3]],["string",3]],[[["str",15]],["string",3]],[[["str",15]],["string",3]],[[["str",15]],["string",3]]],"p":[[3,"RegFileObject"],[3,"RegValueObject"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};